---
- name: Load OS-specific vars.
  include_vars: "{{ lookup('first_found', params) }}"
  vars:
    params:
      files:
        - "{{ ansible_distribution | replace (' ', '') }}.yml"
        - "{{ ansible_os_family | replace (' ', '') }}.yml"
        - main.yml
      paths:
        - 'vars'

- include_tasks: setup-RedHat.yml
  when: ansible_os_family == 'RedHat'

- include_tasks: setup-Debian.yml
  when: ansible_os_family == 'Debian'

- include_tasks: "setup-Debian.yml"
  when: ansible_os_family == 'Astra Linux'

- name: Ensure group "docker" exists with correct gid
  group:
    name: docker
    state: present
    gid: "{{ docker_group_id }}"
  when: docker_service_group == true

- name: Creating /etc/docker
  file:
    name: /etc/docker
    owner: root
    group: root
    mode: 0644
    state: directory

- name: docker_daemon | Override default daemon with syslog_opts
  set_fact:
    docker_daemon: "{{ docker_daemon | combine(docker_daemon_syslog, recursive=True) }}"
  tags: always
  when: docker_log_driver == "syslog"

- name: docker_daemon | Override default daemon with json_opts
  set_fact:
    docker_daemon: "{{ docker_daemon | combine(docker_daemon_json, recursive=True) }}"
  tags: always
  when: docker_log_driver == "json-file"

- name: Create daemon.json
  template:
    src: etc/docker/daemon.json.j2
    dest: /etc/docker/daemon.json
    owner: root
    group: root
    mode: 0644
  notify: restart docker

- name: Install Docker packages.
  package:
    name: "{{ docker_packages }}"
    state: "{{ docker_packages_state }}"
  notify: restart docker
  ignore_errors: "{{ ansible_check_mode }}"
  when: "ansible_version.full is version_compare('2.12', '<') or ansible_os_family not in ['RedHat', 'Debian']"

- name: Install Docker packages (with downgrade option).
  package:
    name: "{{ docker_packages }}"
    state: "{{ docker_packages_state }}"
    allow_downgrade: true
  notify: restart docker
  ignore_errors: "{{ ansible_check_mode }}"
  when: "ansible_version.full is version_compare('2.12', '>=') and ansible_os_family in ['RedHat', 'Debian']"

- name: Install docker-compose plugin.
  package:
    name: "{{ docker_compose_package }}"
    state: "{{ docker_compose_package_state }}"
  notify: restart docker
  ignore_errors: "{{ ansible_check_mode }}"
  when: "docker_install_compose_plugin | bool == true and (ansible_version.full is version_compare('2.12', '<') or ansible_os_family not in ['RedHat', 'Debian'])"

- name: Install docker-compose-plugin (with downgrade option).
  package:
    name: "{{ docker_compose_package }}"
    state: "{{ docker_compose_package_state }}"
    allow_downgrade: true
  notify: restart docker
  ignore_errors: "{{ ansible_check_mode }}"
  when: "docker_install_compose_plugin | bool == true and ansible_version.full is version_compare('2.12', '>=') and ansible_os_family in ['RedHat', 'Debian']"

- name: Configure Docker daemon options.
  copy:
    content: "{{ docker_daemon_options | to_nice_json }}"
    dest: /etc/docker/daemon.json
    mode: 0644
  when: docker_daemon_options.keys() | length > 0
  notify: restart docker

- name: Change remote port in service
  ini_file:
    dest: "{{ docker_service_file_name }}"
    section: Service
    option: ExecStart
    value: /usr/bin/dockerd -H fd:// {%if docker_remote_port_open | bool%}-H tcp://{{ docker_interface_remote }}:{{ docker_remote_port }}{%endif%} --containerd=/run/containerd/containerd.sock
  when:
    - docker_service_manage | bool
  notify:
    - daemon reload
    - restart docker

- name: Ensure Docker is started and enabled at boot.
  service:
    name: docker
    state: "{{ docker_service_state }}"
    enabled: "{{ docker_service_enabled }}"
  ignore_errors: "{{ ansible_check_mode }}"
  when: docker_service_manage | bool

- name: Ensure handlers are notified now to avoid firewall conflicts.
  meta: flush_handlers

- include_tasks: docker-compose.yml
  when: docker_install_compose | bool

- name: Get docker group info using getent.
  getent:
    database: group
    key: docker
    split: ':'
  when: docker_users | length > 0

- name: Check if there are any users to add to the docker group.
  set_fact:
    at_least_one_user_to_modify: true
  when:
    - docker_users | length > 0
    - item not in ansible_facts.getent_group["docker"][2]
  with_items: "{{ docker_users }}"

- include_tasks: docker-users.yml
  when: at_least_one_user_to_modify is defined

- name: Log into registry
  community.docker.docker_login:
    registry_url: "{{ docker_registry_url }}"
    username: "{{ docker_registry_user }}"
    password: "{{ docker_registry_password }}"
  when:
    - docker_registry_url is defined
    - docker_registry_user is defined
    - docker_registry_password is defined
  tags:
    - login

- name: Set list of swarm nodes
  set_fact:
    docker_swarm_nodes_list: "{{ docker_swarm_nodes_list | default ([]) + [item] }}"
  loop: "{{ ansible_play_batch }}"
  run_once: true
  when:
    - hostvars[item].docker_swarm_configure is defined
    - hostvars[item].docker_swarm_configure
  tags:
    - swarm
    - clear_stack

- name: Leave swarm for a node
  community.docker.docker_swarm:
    state: absent
    force: true
  when: not docker_swarm_configure
  tags:
    - swarm

- import_tasks: docker-swarm.yml
  tags:
    - swarm
  when: docker_swarm_configure

- include_tasks:
    file: docker-networks.yml
    apply:
      tags:
        - network_config
  loop: "{{ docker_additional_networks }}"
  loop_control:
    loop_var: network
  tags: network_config

- name: Delete swarm
  community.docker.docker_swarm:
    state: absent
    force: true
  tags:
    - never
    - delete
