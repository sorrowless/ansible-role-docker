---
# Edition can be one of: 'ce' (Community Edition) or 'ee' (Enterprise Edition).
# You can define version of docker by variable docker_version, for example: '=5:23.0.2-1~ubuntu.20.04~focal'
docker_edition: 'ce'
docker_version: ''
docker_packages:
  - "docker-{{ docker_edition }}{{ docker_version }}"
  - "docker-{{ docker_edition }}-cli{{ docker_version}}"
  - "docker-{{ docker_edition }}-rootless-extras{{ docker_version}}"
  - "containerd.io"
  - "docker-buildx-plugin"
  - "docker-compose"
docker_packages_state: present

# Service options.
docker_service_manage: true
docker_service_state: started
docker_service_enabled: true
docker_restart_handler_state: restarted
docker_service_group: false
docker_group_id: 998

# Docker Compose Plugin options.
docker_install_compose_plugin: false
docker_compose_package: docker-compose-plugin
docker_compose_package_state: present

# Docker Compose options.
docker_install_compose: false
docker_compose_version: "v2.11.1"
docker_compose_arch: "{{ ansible_architecture }}"
docker_compose_url: "https://github.com/docker/compose/releases/download/{{ docker_compose_version }}/docker-compose-linux-{{ docker_compose_arch }}"
docker_compose_path: /usr/local/bin/docker-compose

# Docker repo URL.
docker_repo_url: https://download.docker.com/linux

# Enable repo setup
docker_add_repo: true

# Used only for Debian/Ubuntu/Pop!_OS/Linux Mint. Switch 'stable' to 'nightly' if needed.
docker_apt_release_channel: stable
# docker_apt_ansible_distribution is a workaround for Ubuntu variants which can't be identified as such by Ansible,
# and is only necessary until Docker officially supports them.
docker_apt_ansible_distribution: "{{ 'ubuntu' if ansible_distribution in ['Pop!_OS', 'Linux Mint'] else ansible_distribution }}"
docker_apt_arch: "{{ 'arm64' if ansible_architecture == 'aarch64' else 'amd64' }}"
docker_apt_repository: "deb [arch={{ docker_apt_arch }} signed-by=/etc/apt/trusted.gpg.d/docker.asc] {{ docker_repo_url }}/{{ docker_apt_ansible_distribution | lower }} {{ ansible_distribution_release }} {{ docker_apt_release_channel }}"
docker_apt_ignore_key_error: true
docker_apt_gpg_key: "{{ docker_repo_url }}/{{ docker_apt_ansible_distribution | lower }}/gpg"
docker_apt_gpg_key_checksum: "sha256:1500c1f56fa9e26b9b8f42452a553675796ade0807cdce11975eb98170b3a570"
docker_apt_filename: "docker"

# Used only for RedHat/CentOS/Fedora.
docker_yum_repo_url: "{{ docker_repo_url }}/{{ (ansible_distribution == 'Fedora') | ternary('fedora','centos') }}/docker-{{ docker_edition }}.repo"
docker_yum_repo_enable_nightly: '0'
docker_yum_repo_enable_test: '0'
docker_yum_gpg_key: "{{ docker_repo_url }}/centos/gpg"

# A list of users who will be added to the docker group.
docker_users: []

docker_log_driver: "json-file"
docker_bip_network: "10.110.0.1/16"
docker_log_max_size: "512m"
docker_log_max_file: "3"
docker_storage_driver: overlay2
docker_data_root: "/var/lib/docker"

docker_cert_dir: "/etc/ssl_certs/{{ ansible_hostname }}"
docker_log_address: "tcp+tls://192.168.1.11:6514"
docker_ca_cert: "{{ docker_cert_dir }}/ca.d/cacert.pem"
docker_cert: "{{ docker_cert_dir }}/cert.d/{{ ansible_default_ipv4.address }}.pem"
docker_key: "{{ docker_cert_dir }}/key.d/{{ ansible_default_ipv4.address }}.pem"
docker_log_tag: !unsafe '{{.DaemonName}}/{{.Name}}/{{.ID}}'
docker_live_restore: True

docker_daemon:
  log-driver: "{{ docker_log_driver }}"
  log-opts: {}
  bip: "{{ docker_bip_network }}"
  storage-driver: "{{ docker_storage_driver }}"
  data-root: "{{ docker_data_root }}"
  live-restore: "{{ docker_live_restore }}"

docker_daemon_json:
  log-opts:
    max-size: "{{ docker_log_max_size }}"
    max-file: "{{ docker_log_max_file }}"

docker_daemon_syslog:
  log-opts:
    syslog-address: "{{ docker_log_address }}"
    syslog-tls-ca-cert: "{{ docker_ca_cert }}"
    syslog-tls-cert: "{{ docker_cert }}"
    syslog-tls-key: "{{ docker_key }}"
    tag: "{{ docker_log_tag }}"

docker_additional_networks: []
  #- name: prometheus_network
  #  bridge_name: prom_bridge  # this one has to be less than 15 symbols
  #  driver: "bridge"
  #  attachable: false
  #  subnet: 10.10.10.0/24
  #  gateway: 10.10.10.1
  #  iprange: 10.10.10.128/25

# Docker daemon options as a dict
docker_daemon_options: {}

# Docker swarm variables
# You can set any interface, that is listened by docker engine.
# e.g. docker_swarm_interface: "eth1"
docker_swarm_interface: "{{ ansible_default_ipv4['interface'] }}"
docker_swarm_addr: "{{ hostvars[inventory_hostname]['ansible_' + docker_swarm_interface]['ipv4']['address'] }}"
docker_swarm_port: 2377
docker_swarm_mask_length: 16
docker_swarm_default_addr_pool: "10.0.0.0/8"
docker_swarm_node_labels: {}
docker_swarm_manager: false
docker_swarm_availability: active
docker_swarm_configure: false
